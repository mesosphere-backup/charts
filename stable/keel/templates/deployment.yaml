apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "keel.fullname" . }}
  namespace: kube-system
  labels:
    app: {{ template "keel.name" . }}
    chart: {{ template "keel.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "keel.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "keel.name" . }}
        release: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ template "keel.name" . }}
      containers:
        - name: keel
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/keel"]
{{- if .Values.googleApplicationCredentials }}
          volumeMounts:
            - name: google
              mountPath: "/google"
              readOnly: true
{{- end }}
          env:
{{- if .Values.googleApplicationCredentials }}
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /google/google-application-credentials.json
{{- end }}
{{- if .Values.polling.enabled }}
            # Enable polling
            - name: POLL
              value: "1"
{{- else }}
            # Disable polling
            - name: POLL
              value: "0"
{{- end }}
{{- if .Values.helmProvider.enabled }}
            # Enable/disable Helm provider
            - name: HELM_PROVIDER
              value: "1"
{{- end }}
{{- if .Values.gcr.enabled }}
            # Enable GCR with pub/sub support
            - name: PROJECT_ID
              value: "{{ .Values.gcr.projectId }}"
            - name: PUBSUB
              value: "1"
{{- end }}
{{- if .Values.ecr.enabled }}
            # Enable AWS ECR support for polling trigger
            - name: AWS_REGION
              value: "{{ .Values.ecr.awsRegion }}"
            - name: AWS_ACCESS_KEY_ID
              value: "{{ .Values.ecr.awsAccessKeyId }}"
            - name: AWS_SECRET_ACCESS_KEY
              value: "{{ .Values.ecr.awsSecretAccessKey }}"
{{- end }}
{{- if .Values.webhook.enabled }}
            # Enable webhook endpoint
            - name: WEBHOOK_ENDPOINT
              value: "{{ .Values.webhook.endpoint }}"
{{- end }}
{{- if .Values.mattermost.enabled }}
            # Enable mattermost endpoint
            - name: MATTERMOST_ENDPOINT
              value: "{{ .Values.mattermost.endpoint }}"
{{- end }}
{{- if .Values.slack.enabled }}
            - name: SLACK_TOKEN
              value: "{{ .Values.slack.token }}"
            - name: SLACK_CHANNELS
              value: "{{ .Values.slack.channel }}"
            - name: SLACK_APPROVALS_CHANNEL
              value: "{{ .Values.slack.approvals_channel }}"
  {{- if .Values.slack.bot_name }}
            - name: SLACK_BOT_NAME
              value: "{{ .Values.slack.bot_name }}"
  {{- end }}
{{- end }}
{{- if .Values.hipchat.enabled }}
            # Enable hipchat approvials and notification
            - name: HIPCHAT_TOKEN
              value: "{{ .Values.hipchat.token }}"
            - name: HIPCHAT_CHANNELS
              value: "{{ .Values.hipchat.channel }}"
            - name: HIPCHAT_APPROVALS_CHANNEL
              value: "{{ .Values.hipchat.approvals_channel }}"
            - name: HIPCHAT_APPROVALS_BOT_NAME
              value: "{{ .Values.hipchat.bot_name }}"
            - name: HIPCHAT_APPROVALS_USER_NAME
              value: "{{ .Values.hipchat.user_name }}"
            - name: HIPCHAT_APPROVALS_PASSWORT
              value: "{{ .Values.hipchat.password }}"
{{- end }}
{{- if .Values.debug }}
            # Enable debug logging
            - name: DEBUG
              value: "1"
{{- end }}
{{- if .Values.insecure_registry }}
            # Enable insecure registries
            - name: INSECURE_REGISTRY
              value: "{{ .Values.insecure_registry }}"
 {{- end }}
          ports:
            - containerPort: 9300
          livenessProbe:
            httpGet:
              path: /healthz
              port: 9300
            initialDelaySeconds: 30
            timeoutSeconds: 10
          resources:
{{ toYaml .Values.resources | indent 12 }}
{{- if .Values.webhookRelay.enabled }}
        - name: webhookrelayd
          image: "{{ .Values.webhookRelay.image.repository }}:{{ .Values.webhookRelay.image.tag }}"
          imagePullPolicy: {{ .Values.webhookRelay.image.pullPolicy }}
          command: ["/webhookrelayd"]
          env:
            - name: KEY
              valueFrom:
                secretKeyRef:
                  name: {{ template "keel.name" . }}-webhookrelay
                  key: key
            - name: SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ template "keel.name" . }}-webhookrelay
                  key: secret
            - name: BUCKET
              value: "{{ .Values.webhookRelay.bucket }}"
          resources:
{{ toYaml .Values.resources | indent 12 }}
{{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
{{- if .Values.googleApplicationCredentials }}
      volumes:
        - name: google
          secret:
            secretName: {{ template "keel.name" . }}-google
{{- end }}
